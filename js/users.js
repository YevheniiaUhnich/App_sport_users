// User management functionality
import { users, currentUser, exercises, runningHistory, setCurrentUser, setExercises, setRunningHistory } from './state.js';
import { saveToStorage } from './storage.js';
import { showNotification } from './notifications.js';
import { renderExercises } from './exercises.js';
import { updateStats } from './stats.js';
import { drawRunningChart } from './running.js';

export function createUser() {
    const userName = prompt('–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:');
    if (userName && userName.trim()) {
        const userId = userName.trim().toLowerCase().replace(/\s+/g, '_');
        if (!users[userId]) {
            users[userId] = {
                name: userName.trim(),
                exercises: [],
                runningHistory: {},
                createdAt: new Date().toISOString()
            };
            setCurrentUser(userId);
            setExercises([]);
            setRunningHistory({});
            saveToStorage();
            renderUserSelector();
            renderExercises();
            updateStats();
            drawRunningChart();
            showNotification(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${userName}" —Å—Ç–≤–æ—Ä–µ–Ω–æ! üë§`);
        } else {
            showNotification('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î!', 'error');
        }
    }
}

export function switchUser(userId) {
    if (users[userId]) {
        // Save current user data
        if (users[currentUser]) {
            users[currentUser].exercises = exercises;
            users[currentUser].runningHistory = runningHistory;
        }
        
        // Switch to new user
        setCurrentUser(userId);
        setExercises(users[currentUser].exercises || []);
        setRunningHistory(users[currentUser].runningHistory || {});
        
        saveToStorage();
        renderExercises();
        updateStats();
        drawRunningChart();
        
        showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${users[currentUser].name}" üîÑ`);
    }
}

export function deleteUser(userId) {
    if (userId === 'default') {
        showNotification('–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!', 'error');
        return;
    }
    
    if (confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${users[userId].name}"? –í—Å—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ!`)) {
        delete users[userId];
        
        // Switch to default user if current user was deleted
        if (currentUser === userId) {
            setCurrentUser('default');
            setExercises(users[currentUser]?.exercises || []);
            setRunningHistory(users[currentUser]?.runningHistory || {});
        }
        
        saveToStorage();
        renderUserSelector();
        renderExercises();
        updateStats();
        drawRunningChart();
        
        showNotification('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');
    }
}

export function renderUserSelector() {
    const container = document.getElementById('userSelector');
    const currentUserName = users[currentUser]?.name || '–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
    
    const userOptions = Object.keys(users).map(userId => {
        const user = users[userId];
        const isActive = userId === currentUser;
        return `
            <div class="user-option ${isActive ? 'active' : ''}" onclick="switchUser('${userId}')">
                <span class="user-name">${user.name}</span>
                ${userId !== 'default' ? `<button class="btn-delete-user" onclick="event.stopPropagation(); deleteUser('${userId}')" title="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞">‚úï</button>` : ''}
            </div>
        `;
    }).join('');
    
    container.innerHTML = `
        <div class="user-selector-header">
            <span class="current-user">üë§ ${currentUserName}</span>
            <button class="btn-add-user" onclick="createUser()" title="–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞">+ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</button>
        </div>
        <div class="user-dropdown" id="userDropdown">
            ${userOptions}
        </div>
    `;
}

export function toggleUserDropdown() {
    const dropdown = document.getElementById('userDropdown');
    dropdown.classList.toggle('active');
}